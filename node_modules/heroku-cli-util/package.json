{
  "name": "heroku-cli-util",
  "version": "5.7.0",
  "description": "Set of helpful CLI utilities",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/heroku/heroku-cli-util"
  },
  "author": {
    "name": "Jeff Dickey",
    "url": "@dickeyxxx"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/heroku/heroku-cli-util/issues"
  },
  "homepage": "https://github.com/heroku/heroku-cli-util",
  "scripts": {
    "test": "jshint . && mocha",
    "doc": "jsdoc lib"
  },
  "devDependencies": {
    "chai": "^3.0.0",
    "jsdoc": "*",
    "jshint": "*",
    "mocha": "^2.2.4",
    "nock": "3.1.1"
  },
  "dependencies": {
    "chalk": "1.1.1",
    "co": "4.6.0",
    "heroku-client": "2.4.0",
    "lodash": "3.10.1"
  },
  "readme": "# heroku-cli-util\n\n[![Circle CI](https://circleci.com/gh/heroku/heroku-cli-util/tree/master.svg?style=svg)](https://circleci.com/gh/heroku/heroku-cli-util/tree/master)\n[![npm version](https://badge.fury.io/js/heroku-cli-util.svg)](http://badge.fury.io/js/heroku-cli-util)\n[![License](https://img.shields.io/npm/l/heroku-cli-util.svg)](./LICENSE)\n[![Inline docs](http://inch-ci.org/github/heroku/heroku-cli-util.svg?branch=master)](http://inch-ci.org/github/heroku/heroku-cli-util)\n\nSet of helpful CLI utilities\n\n## Installation\n\n```sh\nnpm install heroku-cli-util --save\n```\n\n## Action\n\n```js\nlet cli     = require('heroku-cli-util');\nlet promise = heroku.apps(appname).info();\nlet app     = yield cli.action('getting apps', promise);\nconsole.log(`app name: ${app.name}`);\n\n// getting apps... done\n// app name: appname\n```\n\nNote: to use `yield` you need to wrap this in a [co](https://github.com/tj/co) block.\n\n## Prompt\n\nCallback style\n\n```js\nlet cli = require('heroku-cli-util');\ncli.prompt('email', {}, function (_, email) {\n  console.log(`your email is: ${email}`);\n});\n```\n\nPromise style\n\n```js\nlet cli = require('heroku-cli-util');\ncli.prompt('email', {}).then(function (email) {\n  console.log(`your email is: ${email}`);\n});\n```\n\nGenerator style (must be wrapped in a [co](https://github.com/tj/co) block)\n\n```js\nlet cli   = require('heroku-cli-util');\nlet email = yield cli.prompt('email', {});\nconsole.log(`your email is: ${email}`);\n```\n\n**cli.prompt options**\n\n```js\ncli.prompt('email', {\n  mask: true, // mask input field after submitting\n  hide: true // mask characters while entering\n});\n```\n\n## Confirm App\n\nSupports the same async styles as `prompt()`. Errors if not confirmed.\n\nBasic\n\n```js\nlet cli = require('heroku-cli-util');\nyield cli.confirmApp('appname', context.flags.confirm);\n\n// !     WARNING: Destructive Action\n// !     This command will affect the app appname\n// !     To proceed, type appname or re-run this command with --confirm appname\n\n> appname\n```\n\nCustom message\n\n```js\nlet cli = require('heroku-cli-util');\nyield cli.confirmApp('appname', context.flags.confirm, 'foo');\n\n// !     foo\n// !     To proceed, type appname or re-run this command with --confirm appname\n\n> appname\n```\n\n## Errors\n\n```js\nlet cli = require('heroku-cli-util');\ncli.error(\"App not found\");\n// !    App not found\n```\n\n## Warnings\n\n```js\nlet cli = require('heroku-cli-util');\ncli.warn(\"App not found\");\n// !    App not found\n```\n\n## Dates\n\n```js\nlet cli = require('heroku-cli-util');\nlet d   = new Date();\nconsole.log(cli.formatDate(d));\n// 2001-01-01T08:00:00.000Z\n```\n\n## Hush\n\nUse hush for verbose logging when `HEROKU_DEBUG=1`.\n\n```js\nlet cli = require('heroku-cli-util');\ncli.hush('foo');\n// only prints if HEROKU_DEBUG is set\n```\n\n## Debug\n\nPretty print an object.\n\n```js\nlet cli = require('heroku-cli-util');\ncli.debug({foo: [1,2,3]});\n// { foo: [ 1, 2, 3 ] }\n```\n\n## Stylized output\n\nPretty print a header and hash\n```js\nlet cli = require('heroku-cli-util');\ncli.styledHeader(\"MyApp\");\ncli.styledHash({name: \"myapp\", collaborators: [\"user1@example.com\", \"user2@example.com\"]});\n```\n\nProduces\n\n```\n=== MyApp\nCollaborators: user1@example.com\n               user1@example.com\nName:          myapp\n```\n\n## Table\n\n```js\ncli.table([\n  {app: 'first-app',  language: 'ruby', dyno_count: 3},\n  {app: 'second-app', language: 'node', dyno_count: 2},\n], {\n  columns: [\n    {key: 'app'},\n    {key: 'dyno_count', label: 'Dyno Count'},\n    {key: 'language', format: language => cli.color.red(language)},\n  ]\n});\n```\n\nProduces:\n\n```\napp         Dyno Count  language\n──────────  ──────────  ────────\nfirst-app   3           ruby\nsecond-app  2           node\n```\n\n## Mocking\n\nMock stdout and stderr by using `cli.log()` and `cli.error()`.\n\n```js\nlet cli = require('heroku-cli-util');\ncli.log('message 1'); // prints 'message 1'\ncli.mockConsole();\ncli.log('message 2'); // prints nothing\ncli.stdout.should.eq('message 2\\n');\n```\n\n## Command\n\nUsed for initializing a plugin command.\ngive you an auth'ed instance of `heroku-client` and cleanly handle API exceptions.\n\nIt expects you to return a promise chain. This is usually done with [co](https://github.com/tj/co).\n\n```js\nlet cli = require('heroku-cli-util');\nlet co  = require('co');\nmodule.exports.commands = [\n  {\n    topic: 'apps',\n    command: 'info',\n    needsAuth: true,\n    needsApp: true,\n    run: cli.command(function (context, heroku) {\n      return co(function* () {\n        let app = yield heroku.apps(context.app).info();\n        console.dir(app);\n      });\n    })\n  }\n];\n```\n\nWith options:\n\n```js\nlet cli = require('heroku-cli-util');\nlet co  = require('co');\nmodule.exports.commands = [\n  {\n    topic: 'apps',\n    command: 'info',\n    needsAuth: true,\n    needsApp: true,\n    run: cli.command(\n      {preauth: true},\n      function (context, heroku) {\n        return co(function* () {\n          let app = yield heroku.apps(context.app).info();\n          console.dir(app);\n        });\n      }\n    )\n  }\n];\n```\n\nIf the command has a `two_factor` API error, it will ask the user for a 2fa code and retry.\nIf you set `preauth: true` it will preauth against the current app instead of just setting the header on an app. (This is necessary if you need to do more than 1 API call that will require 2fa)\n\n## Tests\n\n```sh\nnpm install\nnpm test\n```\n\n## License\n\nISC\n",
  "readmeFilename": "README.md",
  "_id": "heroku-cli-util@5.7.0",
  "dist": {
    "shasum": "fe555d3a9023b53653cd79f52617bb9e91a50508"
  },
  "_from": "heroku-cli-util@",
  "_resolved": "https://registry.npmjs.org/heroku-cli-util/-/heroku-cli-util-5.7.0.tgz"
}
